CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(100),
    password VARCHAR(100),
    role VARCHAR(25),
    profile_picture BLOB

);

CREATE TABLE categories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(100),
    category_nbpost INT,
    category_date DATE,
    category_comment_count INT DEFAULT 0

 
);

CREATE TABLE posts (
    posts_id INT PRIMARY KEY,
    posts_title VARCHAR(255),
    posts_description TEXT,
    posts_nbdislike INT,
    posts_nblike INT,
    posts_date,
    posts_comment_count INT DEFAULT 0,
    posts_profile_picture BLOB,
    category_id INT,
    user_id INT,
    FOREIGN KEY (category_id) REFERENCES categories(category_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    comment_text TEXT,
    comment_date DATE,
    comment_dislike INT,
    comment_like INT,
    posts_id INT,
    user_id INT,
    FOREIGN KEY (posts_id) REFERENCES postss(posts_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


CREATE TRIGGER update_posts_comment_count AFTER INSERT ON comments
FOR EACH ROW
BEGIN
    UPDATE posts
    SET posts_comment_count = posts_comment_count + 1
    WHERE post_id = NEW.post_id;
END;

CREATE TRIGGER decrease_posts_comment_count AFTER DELETE ON comments
FOR EACH ROW
BEGIN
    UPDATE posts
    SET posts_comment_count = posts_comment_count - 1
    WHERE post_id = OLD.post_id;
END;

CREATE TRIGGER update_category_comment_count AFTER INSERT ON categories
FOR EACH ROW
BEGIN
    UPDATE categories
    SET category_comment_count = category_comment_count + 1
    WHERE category_id = NEW.category_id;
END;

CREATE TRIGGER decrease_category_comment_count AFTER DELETE ON categories
FOR EACH ROW
BEGIN
    UPDATE categories
    SET category_comment_count = category_comment_count - 1
    WHERE category_id = OLD.category_id;
END;